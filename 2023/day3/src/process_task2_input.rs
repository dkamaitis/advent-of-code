pub fn process_text(contents: &str) -> u32 {
    let contents_vec: Vec<Vec<char>> = contents
        .split("\n")
        .map(|line| line.chars().collect())
        .collect();

    let gear_ratios: Vec<u32> = find_gear_ratios(contents_vec);
    return gear_ratios.iter().sum();
}

pub fn find_gear_ratios(contents: Vec<Vec<char>>) -> Vec<u32> {
    let contents: Vec<Vec<char>> = contents.into_iter().filter(|line| line.len() > 0).collect();
    let mut gear_ratios: Vec<u32> = vec![];

    let m: usize = contents.len();
    let mut n: usize;

    let mut adjacent_indices: Vec<(usize, usize)>;
    let mut current_char: char;

    for i in 0..m {
        n = contents[i].len();
        for j in 0..n {
            current_char = contents[i][j];

            if current_char == '*' {
                adjacent_indices = generate_adjacent_indices(i, j, m, n);
                // Represents: [(line_i, (number_start, number_end))]
                let mut adjacent_number_ranges: Vec<(usize, (usize, usize))> = adjacent_indices
                    .into_iter()
                    .filter(|char_entry| contents[char_entry.0][char_entry.1].is_digit(10))
                    .map(|char_entry| {
                        (
                            char_entry.0,
                            crawl_number(char_entry.1, &contents[char_entry.0], n),
                        )
                    })
                    .collect();
                adjacent_number_ranges.sort();
                adjacent_number_ranges.dedup();
                if adjacent_number_ranges.len() == 2 {
                    gear_ratios.push(
                        adjacent_number_ranges
                            .iter()
                            .map(|number_entry| {
                                let (row_i, (number_start, number_end)) = *number_entry;
                                return chars_to_u32(
                                    contents[row_i][number_start..=number_end].to_vec(),
                                );
                            })
                            .reduce(|acc, e| acc * e)
                            .expect("iterator should always have two elements"),
                    );
                }
            }
        }
    }
    return gear_ratios;
}

pub fn crawl_number(digit_index: usize, line: &Vec<char>, n: usize) -> (usize, usize) {
    let mut number_start: usize = digit_index;
    let mut number_end: usize = digit_index;
    for prev_i in (0..(digit_index)).rev() {
        if line[prev_i].is_digit(10) {
            number_start = prev_i;
        } else {
            break;
        }
    }
    for next_i in digit_index..n {
        if line[next_i].is_digit(10) {
            number_end = next_i;
        } else {
            break;
        }
    }
    return (number_start, number_end);
}

pub fn chars_to_u32(digits: Vec<char>) -> u32 {
    return digits
        .iter()
        .collect::<String>()
        .parse::<u32>()
        .ok()
        .expect("must only attempt to parse digit chars into u32");
}

pub fn generate_adjacent_indices(i: usize, j: usize, m: usize, n: usize) -> Vec<(usize, usize)> {
    let i = i as i32;
    let j = j as i32;
    let n = n as i32;
    let m = m as i32;

    let adjacent_indices = vec![
        (i - 1, j - 1),
        (i - 1, j),
        (i - 1, j + 1),
        (i, j - 1),
        (i, j + 1),
        (i + 1, j - 1),
        (i + 1, j),
        (i + 1, j + 1),
    ];

    return adjacent_indices
        .into_iter()
        .filter(|x| x.0 >= 0 && x.0 < m && x.1 >= 0 && x.1 < n)
        .map(|x| (x.0 as usize, x.1 as usize))
        .collect();
}

#[cfg(test)]
mod tests {
    use super::{crawl_number, find_gear_ratios, generate_adjacent_indices, process_text};

    #[test]
    fn finds_correct_sum() {
        let example_input = String::from(
            "467..114.. \
            \n...*...... \
            \n..35..633. \
            \n......#... \
            \n617*...... \
            \n.....+.58. \
            \n..592..... \
            \n......755* \
            \n...$.*.... \
            \n.664.598..",
        );
        assert_eq!(process_text(&example_input), 467835);
    }

    #[test]
    fn crawls_number_correctly() {
        let test_cases: Vec<((usize, Vec<char>, usize), (usize, usize))> = vec![
            (
                (
                    17,
                    vec![
                        '.', '.', '.', '.', '.', '.', '.', '.', '@', '.', '.', '.', '.', '.', '.',
                        '2', '7', '8', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '@', '.', '.', '1', '3', '5', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '5', '9', '4', '.', '.', '.', '.', '.', '.', '.', '.', '.', '4',
                        '7', '0', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '*',
                        '.', '.', '.', '.', '5', '4', '0', '*', '.', '.', '.', '.', '.', '.', '.',
                        '4', '2', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '7', '7', '5', '.', '5', '3', '6', '.', '.', '7', '9', '0', '.',
                        '.', '.', '.', '.', '.',
                    ],
                    140,
                ),
                (15, 17),
            ),
            (
                (
                    63,
                    vec![
                        '.', '.', '.', '.', '8', '2', '7', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '3',
                        '5', '.', '.', '.', '.', '.', '.', '6', '0', '0', '*', '2', '9', '.', '.',
                        '.', '.', '.', '7', '2', '4', '.', '.', '.', '.', '.', '.', '.', '.', '4',
                        '8', '8', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '*',
                        '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '1', '4', '9', '*', '2', '2', '7', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '.', '.', '.',
                    ],
                    140,
                ),
                (63, 65),
            ),
            (
                (
                    81,
                    vec![
                        '.', '.', '.', '.', '.', '.', '.', '.', '@', '.', '.', '.', '.', '.', '.',
                        '2', '7', '8', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '@', '.', '.', '1', '3', '5', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '5', '9', '4', '.', '.', '.', '.', '.', '.', '.', '.', '.', '4',
                        '7', '0', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '*',
                        '.', '.', '.', '.', '5', '4', '0', '*', '.', '.', '.', '.', '.', '.', '.',
                        '4', '2', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                        '.', '.', '7', '7', '5', '.', '5', '3', '6', '.', '.', '7', '9', '0', '.',
                        '.', '.', '.', '.', '.',
                    ],
                    140,
                ),
                (79, 81),
            ),
        ];
        for (input, expected) in test_cases {
            assert_eq!(crawl_number(input.0, &input.1, input.2), expected);
        }
    }

    #[test]
    fn finds_correct_gear_ratios() {
        let example_input = vec![
            vec![
                '.', '.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '4', '4', '9', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '8', '0', '2', '.', '.',
                '.', '.', '.', '.', '.', '.', '7', '6', '2', '.', '.', '.', '.', '.', '5', '2',
                '2', '.', '.', '1', '3', '9', '+', '.', '.', '1', '5', '4', '.', '.', '2', '6',
                '6', '$', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '4', '6', '.', '3', '2', '3', '.', '.',
                '.', '.', '.', '7', '1', '2', '*', '.', '.', '.', '.', '.',
            ],
            vec![
                '.', '.', '.', '.', '8', '2', '7', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '3', '5', '.', '.',
                '.', '.', '.', '.', '6', '0', '0', '*', '2', '9', '.', '.', '.', '.', '.', '7',
                '2', '4', '.', '.', '.', '.', '.', '.', '.', '.', '4', '8', '8', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '1', '4', '9', '*', '2', '2', '7',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
            ],
            vec![
                '.', '.', '.', '.', '.', '.', '.', '.', '@', '.', '.', '.', '.', '.', '.', '2',
                '7', '8', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '@',
                '.', '.', '1', '3', '5', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '5',
                '9', '4', '.', '.', '.', '.', '.', '.', '.', '.', '.', '4', '7', '0', '*', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '5',
                '4', '0', '*', '.', '.', '.', '.', '.', '.', '.', '4', '2', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '7', '7', '5', '.', '5', '3',
                '6', '.', '.', '7', '9', '0', '.', '.', '.', '.', '.', '.',
            ],
            vec![
                '.', '.', '.', '.', '.', '9', '9', '0', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '7', '4', '2', '.', '.', '.', '.', '.', '.', '1', '8', '1', '.',
                '.', '.', '.', '*', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '*', '.', '.', '@', '5', '2', '1', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '7', '4', '3', '.', '.', '.', '.',
                '.', '.', '.', '5', '5', '2', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '3', '1', '0', '.', '.', '.', '*', '.', '.', '.', '.', '+', '7', '3',
                '8', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '*', '.', '.', '.', '.', '.',
            ],
            vec![
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '1', '2', '5', '.', '.', '.', '.', '.', '.',
                '.', '3', '1', '1', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '7', '1', '5', '.', '.', '.', '.', '.', '.', '.', '.', '2', '6', '3', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '1', '7', '3', '.', '.', '.', '.',
                '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '2',
                '3', '5', '.', '.', '.', '.', '2', '9', '1', '.', '.', '.',
            ],
        ];
        assert_eq!(
            find_gear_ratios(example_input),
            vec![17400, 6468, 33823, 35650, 206276, 340280, 362584, 298080, 41985, 424710, 229890]
        );
    }

    #[test]
    fn generates_correct_adjacent_indices() {
        assert_eq!(
            generate_adjacent_indices(0, 1, 3, 2),
            vec![(0, 0), (1, 0), (1, 1)]
        );
    }
}
